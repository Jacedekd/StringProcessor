# StringProcessor

## Overview
This repository contains the implementation of the `StringProcessor` class, which provides various methods to process strings. The class includes methods to:
- Check if a password is strong.
- Count the number of digits in a sentence.
- Calculate the number of words in a sentence.
- Evaluate a mathematical expression in a string.

## Methods Implemented
1. **isStrongPassword(String password)**:
   - Checks if the password contains at least one uppercase letter, one lowercase letter, one digit, and one special character.

2. **calculateDigits(String sentence)**:
   - Counts the number of digits present in the provided sentence.

3. **calculateWords(String sentence)**:
   - Calculates the number of words in the sentence, considering words as separated by spaces.

4. **calculateExpression(String expression)**:
   - Evaluates a valid mathematical expression from a string using a built-in JavaScript engine.

## Test Cases
Each method is tested with five different cases, including edge cases:

### `isStrongPassword(String password)`:
- **Test Case 1**: Password "Password123!" → Expected: `true` → Result: `true`
- **Test Case 2**: Password "weakpass" → Expected: `false` → Result: `false`
- **Test Case 3**: Password "Weakpass1" → Expected: `false` → Result: `false`
- **Test Case 4**: Password "Str0ng@Pass" → Expected: `true` → Result: `true`
- **Test Case 5**: Password "1234" → Expected: `false` → Result: `false`

### `calculateDigits(String sentence)`:
- **Test Case 1**: "There are 3 apples and 2 oranges." → Expected: `2` → Result: `2`
- **Test Case 2**: "No digits here!" → Expected: `0` → Result: `0`
- **Test Case 3**: "1234567890" → Expected: `10` → Result: `10`
- **Test Case 4**: "2024 is the year" → Expected: `4` → Result: `4`
- **Test Case 5**: Empty string "" → Expected: `0` → Result: `0`

### `calculateWords(String sentence)`:
- **Test Case 1**: "Hello World!" → Expected: `2` → Result: `2`
- **Test Case 2**: "   This is a test sentence.   " → Expected: `5` → Result: `5`
- **Test Case 3**: "OneWord" → Expected: `1` → Result: `1`
- **Test Case 4**: Empty string "" → Expected: `0` → Result: `0`
- **Test Case 5**: "Multiple   spaces   here." → Expected: `3` → Result: `3`

### `calculateExpression(String expression)`:
- **Test Case 1**: "3 + 5" → Expected: `8.0` → Result: `8.0`
- **Test Case 2**: "10 / 2" → Expected: `5.0` → Result: `5.0`
- **Test Case 3**: "(2 + 3) * 4" → Expected: `20.0` → Result: `20.0`
- **Test Case 4**: "100 - 50 + 25" → Expected: `75.0` → Result: `75.0`
- **Test Case 5**: "3.5 * 2" → Expected: `7.0` → Result: `7.0`

## Problems

### Problem 1: Evaluating Mathematical Expressions
While working on the method `calculateExpression`, I initially struggled with evaluating a string that contained arithmetic operations. I was not familiar with any native Java approach that would allow me to evaluate mathematical expressions directly. After doing some research, I found a way to use the built-in JavaScript engine (`ScriptEngine`) in Java to evaluate such expressions. This was a key turning point, but it took some time to understand how to implement it correctly.

### Problem 2: Handling Null and Empty Strings
In the methods `calculateDigits` and `calculateWords`, I faced an issue with handling null or empty strings. Initially, the methods threw exceptions when a null value was passed. I solved this by adding explicit null checks at the beginning of these methods, ensuring that the code would not break if an invalid input was given.

### Problem 3: Password Strength Complexity
In the `isStrongPassword` method, I underestimated the complexity of defining a strong password. Initially, I only checked for the presence of at least one letter and one digit. However, after reviewing the requirements, I realized that I also needed to account for special symbols and enforce a length restriction. To address this, I added conditions to check for uppercase, lowercase, digits, and special characters individually.

### Problem 4: Counting Words with Multiple Spaces
For `calculateWords`, I encountered a bug when dealing with multiple consecutive spaces in the input string. The `split()` function was not handling extra spaces well. After some trial and error, I managed to fix this by using a regular expression (`\\s+`), which allowed me to split the string based on any sequence of spaces.

### Lessons Learned
- Exception handling is crucial in string manipulation to avoid crashes with invalid inputs.
- Regular expressions are highly useful when dealing with strings and can simplify complex tasks.
- External libraries or built-in engines, like the JavaScript engine in this case, can help tackle problems that are difficult to implement from scratch.

## Conclusion
The project was a great learning experience, especially in understanding how to handle strings in Java. Despite facing several challenges, such as evaluating mathematical expressions and managing edge cases for string inputs, I was able to implement a robust solution for each of the required methods. The tests provided valuable insights into the accuracy and reliability of the methods, and all test cases passed as expected.